# BackEnd/Models/recommendation.py

# ─── Database Model: Recommendations ───────────────────────────────────────────

from sqlalchemy import Column, Integer, String, Text, Date, Enum, ForeignKey, DateTime
from sqlalchemy.orm import relationship
from datetime import datetime
from enum import Enum as PyEnum

from BackEnd.Utils.database import Base

# ────────────────────────────────────────────────────────────────────────────────
# ── Enums ──────────────────────────────────────────────────────────────────────

class RecommendationSource(str, PyEnum):
    """
    Defines possible origins of a recommendation:
    - pediatrician: Suggested by a medical professional.
    - ai_model: Generated by the AI system (default).
    - parent_community: Shared by community members.
    - educator: Provided by teachers or specialists.
    """
    PEDIATRICIAN = "pediatrician"
    AI_MODEL = "ai_model"
    PARENT_COMMUNITY = "parent_community"
    EDUCATOR = "educator"


class RecommendationPriority(str, PyEnum):
    """
    Defines priority level of a recommendation:
    - critical: Requires immediate attention.
    - high: Important but not urgent.
    - medium: Standard suggestions (default).
    - low: Optional or informational.
    """
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"

# ────────────────────────────────────────────────────────────────────────────────
# ── Recommendation Model ───────────────────────────────────────────────────────

class Recommendation(Base):
    """
    SQLAlchemy model representing the recommendations table.

    Purpose:
    - Stores actionable recommendations for parents,
      generated either by AI or human experts.

    Columns:
    - id: Primary key.
    - child_id: Foreign key linking to child profile.
    - title: Short summary of the recommendation.
    - description: Full recommendation content.
    - source: Enum indicating recommendation origin.
    - priority: Enum representing urgency level.
    - effective_date: When the recommendation becomes valid.
    - expiration_date: Optional end date.
    - type: 'behavior', 'emotional', or other classification.
    - extra_data: Optional serialized metadata.
    - created_at: Record creation timestamp.

    Relationships:
    - child_profile: Associated ChildProfile object.
    """

    __tablename__ = "recommendations"

    # ── Primary Key ────────────────────────────────────────────────────────────
    id = Column(Integer, primary_key=True)

    # ── Foreign Key ────────────────────────────────────────────────────────────
    child_id = Column(Integer, ForeignKey("child_profiles.child_id"))

    # ── Recommendation Data ────────────────────────────────────────────────────
    title = Column(String(100), nullable=False)
    description = Column(Text, nullable=False)
    source = Column(Enum(RecommendationSource), default=RecommendationSource.AI_MODEL)
    priority = Column(Enum(RecommendationPriority), default=RecommendationPriority.MEDIUM)

    # ── Timing and Classification ──────────────────────────────────────────────
    effective_date = Column(Date, nullable=False, default=datetime.utcnow)
    expiration_date = Column(Date, nullable=True)
    type = Column(String(50))  # E.g., 'behavior', 'emotional'
    extra_data = Column(Text)

    # ── Metadata ───────────────────────────────────────────────────────────────
    created_at = Column(DateTime, default=datetime.utcnow)

    # ── Relationships ──────────────────────────────────────────────────────────
    child_profile = relationship("ChildProfile", back_populates="recommendations")

# ────────────────────────────────────────────────────────────────────────────────
